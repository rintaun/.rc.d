" filesystem management
set nowb       " do not create filename~ backups
set noswapfile " do not use .filename.swp/swo swap files

" code style preferences
set smartindent  " have VIM auto-indent when possible
set tabstop=4 " tabs are 4 characters wide by default for most code
set shiftwidth=4 " indent level is also 4 characters wide by default
set expandtab    " expand tabs to spaces when I push the tab key
set nopaste      " do not assume paste mode by default
set backspace=indent,eol,start
set switchbuf=usetab,newtab

" remap ]], [[, [], and ][ to find block edges without C-style blocking
" Filched from vim help, see :help object-motions
map [[ ?{<CR>w99[{
map ][ /}<CR>b00]}
map ]] j0[[%/{<CR>
map [] k$][%?}<CR>

map <C-PageUp> gT<CR>
map <C-PageDown> gt<CR>

" syntax highlighting
set       t_Co=256 " 256-color terminal
syntax    enable   " enable highlighting

" add overflow column warning coloring
if exists('+colorcolumn')
    set colorcolumn=79
else
    au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>79.\+', -1)
endif

" set text width manually, cause colorcolumn sets it to that
set textwidth=78

" special case textwidth for git commit messages
autocmd FileType gitcommit set textwidth=72

" grab the contents of the visual selection
" thanks to http://stackoverflow.com/a/6271254
function! VS()
    let [lnum1, col1] = getpos("'<")[1:2]
    let [lnum2, col2] = getpos("'>")[1:2]
    let lines = getline(lnum1, lnum2)
    let lines[-1] = lines[-1][: col2 - 2]
    let lines[0] = lines[0][col1 - 1:]
    return join(lines, "\n")
endfunction

" learn vim the hard way - disable arrow movement
inoremap <Up>    <NOP>
inoremap <Down>  <NOP>
inoremap <Left>  <NOP>
inoremap <Right> <NOP>
noremap  <Up>    <NOP>
noremap  <Down>  <NOP>
noremap  <Left>  <NOP>
noremap  <Right> <NOP>

" Highlight end of line whitespace.
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/

" PLUGIN - vundle
" NOTES
"   This requires pre-cloning of the git repository, eg:
"   $ git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
" required settings for vundle
set      nocompatible
filetype off
set      rtp+=~/.vim/bundle/vundle
call     vundle#rc()
" have vundle manage vundle
Plugin 'VundleVim/Vundle.vim'

" PLUGIN - vim-fugitive
Plugin 'tpope/vim-fugitive'

" PLUGIN - vim-rhubarb
Plugin 'tpope/vim-rhubarb'

" PLUGIN - vim-markdown
Plugin 'tpope/vim-markdown'

" PLUGIN - NERDTree
Plugin 'scrooloose/nerdtree'

" PLUGIN - NERDTree Git plugin
Plugin 'Xuyuanp/nerdtree-git-plugin'

" PLUGIN - undo-tree
Plugin 'mbbill/undotree'

" PLUGIN - puppet-syntax-vim
Plugin 'puppetlabs/puppet-syntax-vim'

" PLUGIN - html5-syntax-vim
Plugin 'othree/html5.vim'

" PLUGIN - vim-javascript
Plugin 'pangloss/vim-javascript'

" PLUGIN - vim-handlebars
Plugin 'nono/vim-handlebars'

" PLUGIN - vim-less
Plugin 'groenewege/vim-less'

" PLUGIN - vim-yml
Plugin 'vim-scripts/yaml.vim'
    au BufNewFile,BufRead *.yaml,*.yml    setf yaml

" PLUGIN - vim-indent-guides
Plugin 'nathanaelkane/vim-indent-guides'
    " prevent errors from cropping up
    hi Normal ctermbg=black
    let g:indent_guides_start_level = 2 " no clue
    let g:indent_guides_guide_size  = 1 " no fat guides
    let g:indent_guides_auto_colors = 0 " skip auto-color decisions
    " make some pretty colors
    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=239
    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=236
    " turn it on by default
    autocmd VimEnter * :IndentGuidesEnable

    " post-vundle-install required setting
    filetype plugin indent on

Plugin 'mitsuhiko/vim-jinja'
    au BufNewFile,BufRead *.jinja2 setf htmljinja

" PLUGIN - editorconfig-vim
Plugin 'editorconfig/editorconfig-vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
    let g:airline_theme='bubblegum'

    " powerline symbols
    let g:airline_powerline_fonts = 1
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    let g:airline_symbols.branch = 'îˆ '

    " tabline
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
    let g:airline#extensions#tabline#fnamemod = ':t'
    let g:airline#extensions#tabline#fnamecollapse=0
    let g:airline#extensions#tabline#fnametruncate=0

    " whitspace
    let g:airline#extensions#whitespace#enabled = 1

Plugin 'w0rp/ale'
    let g:jsx_ext_required = 0

    let g:ale_fixers = {}
    let g:ale_fixers['javascript'] = ['prettier', 'eslint']
    let g:ale_fixers['css'] = ['prettier', 'stylelint']
    let g:ale_fixers['scss'] = g:ale_fixers['css']
    let g:ale_fixers['ruby'] = ['rubocop']

    let g:ale_linters = {}
    let g:ale_linters['javascript'] = ['eslint']
    let g:ale_linters['css'] = ['stylelint']
    let g:ale_linters['scss'] = g:ale_linters['css']
    let g:ale_linters['ruby'] = ['rubocop']

    let g:ale_sign_column_always = 1
    let g:ale_fix_on_save = 1

colorscheme bubblegum-256-dark

Plugin 'Valloric/YouCompleteMe'

Plugin 'noprompt/vim-yardoc'

Plugin 'junegunn/fzf'
nnoremap <C-p> :FZF<Cr>
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Identifier'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Identifier'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }
let g:fzf_action = {
  \ 'enter':  'tab split',
  \ 'ctrl-e': 'e',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

set number

Plugin 'tpope/vim-endwise'
